/** Object model of a color in the HSL space */
export interface HSL {
    h: number;
    s: number;
    l: number;
    a: number;
}
/**
 * Checks if the given value is an HSL object
 *
 * @param color - value to inspect
 * @returns true/false (type predicate for `HSL` in TS)
 */
export declare function isHsl(color: any): color is HSL;
/**
 * Normalizes the color component values of an HSL object
 * to range [0..360) for h, [0..100] for s,l and [0..1]
 * for alpha
 *
 * @param hsl - HSL object
 * @returns a new HSL object with the normalized values
 */
export declare function normalizeHsl(hsl: HSL): HSL;
/**
 * Creates an HSL model from a given HSL-based color string
 *
 * @param colorString - CSS color string
 * @returns an `{h,s,l,a}` color object (or `null` if invalid color string)
 */
export declare function hslFromColorString(colorString: string): HSL | null;
/**
 * Creates an HSL model from a given color string
 *
 * @param colorString - CSS color string
 * @returns an `{h,s,l,a}` color object
 * @throws if argument is not a valid color string
 */
export default function hsl(colorString: string): HSL;
