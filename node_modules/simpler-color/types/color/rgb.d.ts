/** Object model of a color in the RGB space */
export interface RGB {
    r: number;
    g: number;
    b: number;
    a: number;
}
/**
 * Checks if the given value is an RGB object
 *
 * @param color - value to inspect
 * @returns true/false (type predicate for `RGB` in TS)
 */
export declare function isRgb(color: any): color is RGB;
/**
 * Normalizes the color component values of an RGB object
 * to range [0..255] for r,g,b and [0..1] for alpha
 *
 * @param rgb - RGB object
 * @returns a new RGB object with the normalized values
 */
export declare function normalizeRgb(rgb: RGB): RGB;
/**
 * Creates an RGB model from a given RGB-based color string
 *
 * @param colorString - CSS color string
 * @returns an `{r,g,b,a}` color object (or `null` if invalid color string)
 */
export declare function rgbFromColorString(colorString: string): RGB | null;
/**
 * Creates an RGB model from a given color string
 *
 * @param colorString - CSS color string
 * @returns an `{r,g,b,a}` color object (or `null` if invalid color string)
 * @throws if argument is not a valid color string
 */
export default function rgb(colorString: string): RGB;
