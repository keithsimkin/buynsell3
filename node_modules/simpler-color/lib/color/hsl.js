"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = hsl;
exports.hslFromColorString = hslFromColorString;
exports.isHsl = isHsl;
exports.normalizeHsl = normalizeHsl;

var _utils = require("../utils");

var _angle = _interopRequireWildcard(require("./angle"));

var _hslString = require("./parsers/hslString");

var _rgb = require("./rgb");

var _rgbToHsl = _interopRequireDefault(require("./transforms/rgbToHsl"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function isHsl(color) {
  return typeof color.h === 'number' && typeof color.s === 'number' && typeof color.l === 'number' && typeof color.a === 'number';
}

function normalizeHsl(hsl) {
  return {
    h: (0, _angle.normalizeAngle)(hsl.h),
    s: (0, _utils.clamp)(hsl.s, 0, 100),
    l: (0, _utils.clamp)(hsl.l, 0, 100),
    a: (0, _utils.clamp)(hsl.a, 0, 1)
  };
}

function hslFromParsedHslString(match) {
  var _a, _b;

  var hslValues = match.map(function (val) {
    return parseFloat(val);
  });
  var alpha = (_a = hslValues[3]) !== null && _a !== void 0 ? _a : 1;

  if (((_b = match[3]) === null || _b === void 0 ? void 0 : _b.indexOf('%')) > -1) {
    alpha *= 0.01;
  }

  return normalizeHsl({
    h: (0, _angle.default)(match[0]),
    s: hslValues[1],
    l: hslValues[2],
    a: alpha
  });
}

function hslFromRgbString(colorString) {
  var rgbColor = (0, _rgb.rgbFromColorString)(colorString);
  return rgbColor ? (0, _rgbToHsl.default)(rgbColor) : null;
}

function hslFromColorString(colorString) {
  colorString = colorString.trim();
  var match;
  if ((match = (0, _hslString.matchHslString)(colorString)) !== null) return hslFromParsedHslString(match);
  return null;
}

function hsl(colorString) {
  var _a;

  var hslObj = (_a = hslFromColorString(colorString)) !== null && _a !== void 0 ? _a : hslFromRgbString(colorString);
  if (hslObj === null) throw new Error('Invalid color string');
  return hslObj;
}