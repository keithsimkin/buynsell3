"use strict";

var _hexString = require("../hexString");

describe('isHexString', function () {
  var valid = ['#33FFAA', '#ff33aa', '#FFaa33', '#33FFAABB', '#33ffaabb', '#3FA', '#3fab'];
  valid.forEach(function (str) {
    it("returns true for valid hex string: " + str, function () {
      expect((0, _hexString.isHexString)(str)).toBe(true);
    });
  });
  var invalid = ['rgb(127, 255, 255)', 'blue', 'BBAADD', ' #BBAADD ', '#BB AA DD', 'rainbow'];
  invalid.forEach(function (str) {
    it("returns false for invalid hex string: " + str, function () {
      expect((0, _hexString.isHexString)(str)).toBe(false);
    });
  });
});
describe('matchHexString', function () {
  it('returns the RGB and alpha (opacity) hex values in an array', function () {
    var str = '#FFAACCEE';
    expect((0, _hexString.matchHexString)(str)).toEqual(['FF', 'AA', 'CC', 'EE']);
  });
  it('returns only a 3-item array if color has no alpha value', function () {
    var str = '#ffaabb';
    expect((0, _hexString.matchHexString)(str)).toEqual(['ff', 'aa', 'bb']);
  });
  it('captures shorthand RGB and alpha hex values', function () {
    var str = '#FACE';
    expect((0, _hexString.matchHexString)(str)).toEqual(['F', 'A', 'C', 'E']);
  });
  it('returns null if string is not a valid hex string', function () {
    var str = 'rgb(127, 255, 64)';
    expect((0, _hexString.matchHexString)(str)).toBeNull();
  });
});