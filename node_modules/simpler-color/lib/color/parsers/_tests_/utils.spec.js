"use strict";

var _utils = require("../utils");

describe('exact', function () {
  it('returns a new regex that is restricted to exact matches only', function () {
    var regex = /[0-9]+/;
    var exactRegex = (0, _utils.exact)(regex);
    expect(regex.test(' 123 ')).toBe(true);
    expect(exactRegex.test(' 123 ')).toBe(false);
    expect(exactRegex.test('123')).toBe(true);
  });
  it('retains the original flags (if any)', function () {
    var regex = /[a-z]+/i;
    expect((0, _utils.exact)(regex).test('Abc')).toBe(true);
  });
});
describe('extractValuesFromMatch', function () {
  it('returns an array containing only the color components', function () {
    var match = ['#ffaaddee', 'ff', 'aa', 'dd', 'ee'];
    expect((0, _utils.extractValuesFromMatch)(match)).toEqual(['ff', 'aa', 'dd', 'ee']);
  });
  it('removes undefined items', function () {
    var match = ['#ffaadd', 'ff', 'aa', 'dd', undefined];
    expect((0, _utils.extractValuesFromMatch)(match)).toEqual(['ff', 'aa', 'dd']);
  });
});
describe('cssNumberMatcher', function () {
  var matcher = (0, _utils.exact)(_utils.cssNumberMatcher);
  var valid = ['255', '4.5', '0.1', '.1', '007', '1.000', '-255', '+255', '1.28e+2', '1.28E-2', '-01.2800e+02'];
  valid.forEach(function (str) {
    it("tests true for exact match with valid CSS number string: " + str, function () {
      expect(matcher.test(str)).toBe(true);
    });
  });
  var invalid = ['1,000', '1.', '1.0.0', '1_000', 'FF', 'foo'];
  invalid.forEach(function (str) {
    it("tests false for exact match with invalid CSS number string: " + str, function () {
      expect(matcher.test(str)).toBe(false);
    });
  });
});
describe('separatorMatcher', function () {
  var matcher = (0, _utils.exact)(_utils.separatorMatcher);
  var valid = [',', ' ,', ', ', ' , ', ' '];
  valid.forEach(function (str) {
    it("tests true for exact match with valid separator: '" + str + "'", function () {
      expect(matcher.test(str)).toBe(true);
    });
  });
  var invalid = [',,', ', ,', ', , ', '/'];
  invalid.forEach(function (str) {
    it("tests false for exact match with invalid separator: '" + str + "'", function () {
      expect(matcher.test(str)).toBe(false);
    });
  });
});
describe('alphaSeparatorMatcher', function () {
  var matcher = (0, _utils.exact)(_utils.alphaSeparatorMatcher);
  var valid = [',', ', ', ' ,', ' , ', '/', '/ ', ' /', ' / '];
  valid.forEach(function (str) {
    it("tests true for exact match with valid separator: '" + str + "'", function () {
      expect(matcher.test(str)).toBe(true);
    });
  });
  var invalid = [',,', ', ,', ', , ', ',/', ', /', ',/ ', ', / '];
  invalid.forEach(function (str) {
    it("tests false for exact match with invalid separator: '" + str + "'", function () {
      expect(matcher.test(str)).toBe(false);
    });
  });
});