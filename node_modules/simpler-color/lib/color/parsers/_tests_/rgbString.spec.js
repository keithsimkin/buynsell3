"use strict";

var _rgbString = require("../rgbString");

describe('isRgbString', function () {
  var valid = ['rgb(127, 255, 64)', 'rgb(127, 255, 64, 0.1)', 'rgb(127, 255, 64, 10%)', 'rgb(50%, 100%, 25%, 0.1)', 'rgb(240,255,64,0.1)', 'rgb(320, 255.5, -64, 10)', 'rgb(127 255 64)', 'rgb(127 255 64 / 0.1)', 'rgb(127 255 64 / 10%)', 'rgb(50% 100% 25% / 0.1)', 'rgb(127 255 64/0.1)', 'rgba(127, 255, 64, 0.1)', 'rgba(127, 255, 64)', 'rgba(127 255 64 / 0.1)', 'RGB(127, 255, 64)'];
  valid.forEach(function (str) {
    it("returns true for valid rgb string: " + str, function () {
      expect((0, _rgbString.isRgbString)(str)).toBe(true);
    });
  });
  var invalid = ['hsl(240, 100%, 50%)', '#88FFFF', 'blue', ' rgb(127, 255, 64, 0.1) ', 'rgb(127 255 64 0.1)', 'rainbow'];
  invalid.forEach(function (str) {
    it("returns false for invalid rgb string: " + str, function () {
      expect((0, _rgbString.isRgbString)(str)).toBe(false);
    });
  });
});
describe('matchRgbString', function () {
  it('returns RGB and alpha (opacity) values in an array', function () {
    var str = 'rgb(127, 255, 64, 0.1)';
    expect((0, _rgbString.matchRgbString)(str)).toEqual(['127', '255', '64', '0.1']);
  });
  it('captures percentage opacity', function () {
    var str = 'rgb(127, 255, 64, 100%)';
    expect((0, _rgbString.matchRgbString)(str)).toEqual(['127', '255', '64', '100%']);
  });
  it('captures percentage values', function () {
    var str = 'rgb(50%, 100%, 25%, 0.1)';
    expect((0, _rgbString.matchRgbString)(str)).toEqual(['50%', '100%', '25%', '0.1']);
  });
  it('captures negative values', function () {
    var str = 'rgb(-127, -255, -64, -0.1)';
    expect((0, _rgbString.matchRgbString)(str)).toEqual(['-127', '-255', '-64', '-0.1']);
  });
  it('returns only a 3-item array if color has no alpha value', function () {
    var str = 'rgb(127, 255, 64)';
    expect((0, _rgbString.matchRgbString)(str)).toEqual(['127', '255', '64']);
  });
  it('returns null if string is not a valid rgb string', function () {
    var str = 'hsl(240 100% 50%)';
    expect((0, _rgbString.matchRgbString)(str)).toBeNull();
  });
});