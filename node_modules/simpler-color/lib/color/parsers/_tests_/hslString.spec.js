"use strict";

var _hslString = require("../hslString");

describe('isHslString', function () {
  var valid = ['hsl(240, 100%, 50%)', 'hsl(240, 100%, 50%, 0.1)', 'hsl(240, 100%, 50%, 10%)', 'hsl(240,100%,50%,0.1)', 'hsl(180deg, 100%, 50%, 0.1)', 'hsl(3.14rad, 100%, 50%, 0.1)', 'hsl(200grad, 100%, 50%, 0.1)', 'hsl(0.5turn, 100%, 50%, 0.1)', 'hsl(480, 100.5%, -50%, 10)', 'hsl(240 100% 50%)', 'hsl(240 100% 50% / 0.1)', 'hsl(240 100% 50% / 10%)', 'hsl(240deg 100% 50% / 0.1)', 'hsl(240 100% 50%/0.1)', 'hsla(240, 100%, 50%)', 'hsla(240, 100%, 50%, 0.1)', 'HSL(240Deg, 100%, 50%)'];
  valid.forEach(function (str) {
    it("returns true for valid hsl string: " + str, function () {
      expect((0, _hslString.isHslString)(str)).toBe(true);
    });
  });
  var invalid = ['rgb(127, 255, 255)', '#88FFFF', 'blue', 'hsl(240, 1, 0.5, 0.1)', ' hsl(240, 100%, 50%, 0.1) ', 'hsl(240 100% 50% 0.1)', 'rainbow'];
  invalid.forEach(function (str) {
    it("returns false for invalid hsl string: " + str, function () {
      expect((0, _hslString.isHslString)(str)).toBe(false);
    });
  });
});
describe('matchHslString', function () {
  it('returns HSL and alpha (opacity) values in an array', function () {
    var str = 'hsl(240, 100%, 50%, 0.1)';
    expect((0, _hslString.matchHslString)(str)).toEqual(['240', '100', '50', '0.1']);
  });
  it('captures percentage opacity', function () {
    var str = 'hsl(240, 100%, 50%, 10%)';
    expect((0, _hslString.matchHslString)(str)).toEqual(['240', '100', '50', '10%']);
  });
  var hueWithUnit = ['180deg', '3.14rad', '200grad', '0.5turn'];
  hueWithUnit.forEach(function (hue) {
    it("captures hue angle with unit: " + hue, function () {
      var str = "hsl(" + hue + " 100% 50% / 0.1)";
      expect((0, _hslString.matchHslString)(str)).toEqual([hue, '100', '50', '0.1']);
    });
  });
  it('captures negative values', function () {
    var str = 'hsl(-240, -100%, -50%, -0.1)';
    expect((0, _hslString.matchHslString)(str)).toEqual(['-240', '-100', '-50', '-0.1']);
  });
  it('returns only a 3-item array if color has no alpha value', function () {
    var str = 'hsl(240, 100%, 50%)';
    expect((0, _hslString.matchHslString)(str)).toEqual(['240', '100', '50']);
  });
  it('returns null if string is not a valid hsl string', function () {
    var str = 'rgb(127, 255, 64)';
    expect((0, _hslString.matchHslString)(str)).toBeNull();
  });
});