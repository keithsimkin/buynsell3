"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = rgb;
exports.isRgb = isRgb;
exports.normalizeRgb = normalizeRgb;
exports.rgbFromColorString = rgbFromColorString;

var _utils = require("../utils");

var _hsl = require("./hsl");

var _named = _interopRequireDefault(require("./named"));

var _hexString = require("./parsers/hexString");

var _rgbString = require("./parsers/rgbString");

var _hslToRgb = _interopRequireDefault(require("./transforms/hslToRgb"));

function isRgb(color) {
  return typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number' && typeof color.a === 'number';
}

function normalizeRgb(rgb) {
  return {
    r: (0, _utils.clamp)(rgb.r, 0, 255),
    g: (0, _utils.clamp)(rgb.g, 0, 255),
    b: (0, _utils.clamp)(rgb.b, 0, 255),
    a: (0, _utils.clamp)(rgb.a, 0, 1)
  };
}

function rgbFromParsedHexString(match) {
  var _a;

  var rgbValues = match.map(function (val) {
    if (val.length === 1) {
      val = "" + val + val;
    }

    return parseInt(val, 16);
  });
  var alpha = ((_a = rgbValues[3]) !== null && _a !== void 0 ? _a : 255) / 255;
  return {
    r: rgbValues[0],
    g: rgbValues[1],
    b: rgbValues[2],
    a: alpha
  };
}

function rgbFromParsedRgbString(match) {
  var _a;

  var rgbValues = match.map(function (val, index) {
    var num = parseFloat(val);

    if (val.indexOf('%') > -1) {
      num *= 0.01;

      if (index < 3) {
        num *= 255;
      }
    }

    return num;
  });
  return normalizeRgb({
    r: rgbValues[0],
    g: rgbValues[1],
    b: rgbValues[2],
    a: (_a = rgbValues[3]) !== null && _a !== void 0 ? _a : 1
  });
}

function rgbFromHslString(colorString) {
  var hslColor = (0, _hsl.hslFromColorString)(colorString);
  return hslColor ? (0, _hslToRgb.default)(hslColor) : null;
}

function rgbFromColorString(colorString) {
  colorString = colorString.trim();
  if (colorString.toLowerCase() === 'transparent') return {
    r: 0,
    g: 0,
    b: 0,
    a: 0
  };
  var hexFromName = (0, _named.default)(colorString);

  if (hexFromName) {
    colorString = hexFromName;
  }

  var match;
  if ((match = (0, _hexString.matchHexString)(colorString)) !== null) return rgbFromParsedHexString(match);else if ((match = (0, _rgbString.matchRgbString)(colorString)) !== null) return rgbFromParsedRgbString(match);
  return null;
}

function rgb(colorString) {
  var _a;

  var rgbObj = (_a = rgbFromColorString(colorString)) !== null && _a !== void 0 ? _a : rgbFromHslString(colorString);
  if (rgbObj === null) throw new Error('Invalid color string');
  return rgbObj;
}