import { isRgbString, matchRgbString } from '../rgbString';
describe('isRgbString', () => {
  const valid = ['rgb(127, 255, 64)', 'rgb(127, 255, 64, 0.1)', 'rgb(127, 255, 64, 10%)', 'rgb(50%, 100%, 25%, 0.1)', 'rgb(240,255,64,0.1)', 'rgb(320, 255.5, -64, 10)', 'rgb(127 255 64)', 'rgb(127 255 64 / 0.1)', 'rgb(127 255 64 / 10%)', 'rgb(50% 100% 25% / 0.1)', 'rgb(127 255 64/0.1)', 'rgba(127, 255, 64, 0.1)', 'rgba(127, 255, 64)', 'rgba(127 255 64 / 0.1)', 'RGB(127, 255, 64)'];
  valid.forEach(str => {
    it(`returns true for valid rgb string: ${str}`, () => {
      expect(isRgbString(str)).toBe(true);
    });
  });
  const invalid = ['hsl(240, 100%, 50%)', '#88FFFF', 'blue', ' rgb(127, 255, 64, 0.1) ', 'rgb(127 255 64 0.1)', 'rainbow'];
  invalid.forEach(str => {
    it(`returns false for invalid rgb string: ${str}`, () => {
      expect(isRgbString(str)).toBe(false);
    });
  });
});
describe('matchRgbString', () => {
  it('returns RGB and alpha (opacity) values in an array', () => {
    const str = 'rgb(127, 255, 64, 0.1)';
    expect(matchRgbString(str)).toEqual(['127', '255', '64', '0.1']);
  });
  it('captures percentage opacity', () => {
    const str = 'rgb(127, 255, 64, 100%)';
    expect(matchRgbString(str)).toEqual(['127', '255', '64', '100%']);
  });
  it('captures percentage values', () => {
    const str = 'rgb(50%, 100%, 25%, 0.1)';
    expect(matchRgbString(str)).toEqual(['50%', '100%', '25%', '0.1']);
  });
  it('captures negative values', () => {
    const str = 'rgb(-127, -255, -64, -0.1)';
    expect(matchRgbString(str)).toEqual(['-127', '-255', '-64', '-0.1']);
  });
  it('returns only a 3-item array if color has no alpha value', () => {
    const str = 'rgb(127, 255, 64)';
    expect(matchRgbString(str)).toEqual(['127', '255', '64']);
  });
  it('returns null if string is not a valid rgb string', () => {
    const str = 'hsl(240 100% 50%)';
    expect(matchRgbString(str)).toBeNull();
  });
});