import { alphaSeparatorMatcher, cssNumberMatcher, exact, extractValuesFromMatch, separatorMatcher } from '../utils';
describe('exact', () => {
  it('returns a new regex that is restricted to exact matches only', () => {
    const regex = /[0-9]+/;
    const exactRegex = exact(regex);
    expect(regex.test(' 123 ')).toBe(true);
    expect(exactRegex.test(' 123 ')).toBe(false);
    expect(exactRegex.test('123')).toBe(true);
  });
  it('retains the original flags (if any)', () => {
    const regex = /[a-z]+/i;
    expect(exact(regex).test('Abc')).toBe(true);
  });
});
describe('extractValuesFromMatch', () => {
  it('returns an array containing only the color components', () => {
    const match = ['#ffaaddee', 'ff', 'aa', 'dd', 'ee'];
    expect(extractValuesFromMatch(match)).toEqual(['ff', 'aa', 'dd', 'ee']);
  });
  it('removes undefined items', () => {
    const match = ['#ffaadd', 'ff', 'aa', 'dd', undefined];
    expect(extractValuesFromMatch(match)).toEqual(['ff', 'aa', 'dd']);
  });
});
describe('cssNumberMatcher', () => {
  const matcher = exact(cssNumberMatcher);
  const valid = ['255', '4.5', '0.1', '.1', '007', '1.000', '-255', '+255', '1.28e+2', '1.28E-2', '-01.2800e+02'];
  valid.forEach(str => {
    it(`tests true for exact match with valid CSS number string: ${str}`, () => {
      expect(matcher.test(str)).toBe(true);
    });
  });
  const invalid = ['1,000', '1.', '1.0.0', '1_000', 'FF', 'foo'];
  invalid.forEach(str => {
    it(`tests false for exact match with invalid CSS number string: ${str}`, () => {
      expect(matcher.test(str)).toBe(false);
    });
  });
});
describe('separatorMatcher', () => {
  const matcher = exact(separatorMatcher);
  const valid = [',', ' ,', ', ', ' , ', ' '];
  valid.forEach(str => {
    it(`tests true for exact match with valid separator: '${str}'`, () => {
      expect(matcher.test(str)).toBe(true);
    });
  });
  const invalid = [',,', ', ,', ', , ', '/'];
  invalid.forEach(str => {
    it(`tests false for exact match with invalid separator: '${str}'`, () => {
      expect(matcher.test(str)).toBe(false);
    });
  });
});
describe('alphaSeparatorMatcher', () => {
  const matcher = exact(alphaSeparatorMatcher);
  const valid = [',', ', ', ' ,', ' , ', '/', '/ ', ' /', ' / '];
  valid.forEach(str => {
    it(`tests true for exact match with valid separator: '${str}'`, () => {
      expect(matcher.test(str)).toBe(true);
    });
  });
  const invalid = [',,', ', ,', ', , ', ',/', ', /', ',/ ', ', / '];
  invalid.forEach(str => {
    it(`tests false for exact match with invalid separator: '${str}'`, () => {
      expect(matcher.test(str)).toBe(false);
    });
  });
});