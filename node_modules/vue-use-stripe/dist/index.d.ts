import { Ref, DefineComponent, PropType, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps } from 'vue-demi';
import { StripeElementType, StripeCardElementOptions, StripeCardCvcElementOptions, StripeCardExpiryElementOptions, StripeCardNumberElementOptions, StripeAuBankAccountElementOptions, StripeFpxBankElementOptions, StripeIbanElementOptions, StripeIdealBankElementOptions, StripePaymentRequestButtonElementOptions, StripeEpsBankElementOptions, StripeP24BankElementOptions, StripeConstructorOptions, StripeElementsOptions, Stripe, StripeElements, StripeElementChangeEvent, StripeElement } from '@stripe/stripe-js';

declare type ElementType = {
    type: StripeElementType;
    options?: StripeCardElementOptions | StripeCardCvcElementOptions | StripeCardExpiryElementOptions | StripeCardNumberElementOptions | StripeAuBankAccountElementOptions | StripeFpxBankElementOptions | StripeIbanElementOptions | StripeIdealBankElementOptions | StripePaymentRequestButtonElementOptions | StripeEpsBankElementOptions | StripeP24BankElementOptions;
};
declare type StripeOptions = {
    key: string;
    elements?: ElementType[];
    constructorOptions?: StripeConstructorOptions;
    elementsOptions?: StripeElementsOptions;
};
declare const baseStyle: {
    base: {
        color: string;
        fontFamily: string;
        fontSmoothing: string;
        fontSize: string;
        '::placeholder': {
            color: string;
        };
    };
    invalid: {
        color: string;
        iconColor: string;
    };
};
declare function useStripe({ key, elements: types, constructorOptions, elementsOptions, }: StripeOptions): {
    stripe: Ref<Stripe | null>;
    stripeElements: Ref<StripeElements | null>;
    elements: Ref<any>[];
};

declare type ElementChangeEvent = StripeElementChangeEvent & {
    value?: string;
    bankName?: string;
    branchName?: string;
    brand?: string;
    country?: string;
};
declare const _default: DefineComponent<{
    element: {
        type: PropType<StripeElement>;
        default: null;
    };
}, {
    domRef: Ref<HTMLElement>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, string[], string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
    element: StripeElement;
} & {}>, {
    element: StripeElement;
}>;

export { ElementChangeEvent, ElementType, _default as StripeElement, StripeOptions, baseStyle, useStripe };
