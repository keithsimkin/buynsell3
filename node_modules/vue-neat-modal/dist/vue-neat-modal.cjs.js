'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');

const getScrollbarWidth = () => window.innerWidth - document.body.clientWidth;

const defaultProps = {
  alignX: 'center',
  alignY: 'center',
  noSpacing: false,
  clickOut: true,
  eager: false,
  teleportTarget: '#app',
  backdropTransition: undefined,
  modalTransition: 'scale',
  disableMotion: false,
  removeBackdrop: false,
  width: 'auto',
  maxWidth: 'none',
  fullscreen: false
};

const setDefaultProps = options => {
  if (!options) return;
  Object.assign(defaultProps, options);
};

const getDefaultProp = prop => defaultProps[prop];

const COMPONENT_CLASS = 'vue-neat-modal';
var Modal = vue.defineComponent({
  inheritAttrs: false,
  emits: ['after-enter', 'after-leave', 'update:modelValue'],
  props: {
    modelValue: {
      type: Boolean,
      default: undefined
    },
    alignX: {
      type: String,
      validator: v => ['left', 'center', 'right'].includes(v),
      default: () => getDefaultProp('alignX')
    },
    alignY: {
      type: String,
      validator: v => ['top', 'center', 'bottom'].includes(v),
      default: () => getDefaultProp('alignY')
    },
    noSpacing: {
      type: Boolean,
      default: () => getDefaultProp('noSpacing')
    },
    eager: {
      type: Boolean,
      default: () => getDefaultProp('eager')
    },
    clickOut: {
      type: Boolean,
      default: () => getDefaultProp('clickOut')
    },
    teleportTarget: {
      type: [String, HTMLElement],
      default: () => getDefaultProp('teleportTarget')
    },
    backdropTransition: {
      type: String,
      default: () => getDefaultProp('backdropTransition')
    },
    modalTransition: {
      type: String,
      default: () => getDefaultProp('modalTransition')
    },
    disableMotion: {
      type: Boolean,
      default: () => getDefaultProp('disableMotion')
    },
    removeBackdrop: {
      type: Boolean,
      default: () => getDefaultProp('removeBackdrop')
    },
    width: {
      type: String,
      default: () => getDefaultProp('width')
    },
    maxWidth: {
      type: String,
      default: () => getDefaultProp('maxWidth')
    },
    fullscreen: {
      type: Boolean,
      default: () => getDefaultProp('fullscreen')
    },
    wrapperClass: String,
    modalClass: String,
    backdropClass: String
  },

  setup(props, {
    slots,
    emit
  }) {
    const innerValue = vue.ref(false);
    const isMounted = vue.ref(props.eager);
    const isVisible = vue.computed(() => props.modelValue || innerValue.value);

    const setVisibility = value => {
      if (props.modelValue === undefined) {
        innerValue.value = value;
      } else {
        emit('update:modelValue', value);
      }
    };

    const modalStyle = vue.computed(() => ({
      width: props.width,
      maxWidth: props.maxWidth
    }));
    const modalClasses = vue.computed(() => [COMPONENT_CLASS, props.fullscreen && `${COMPONENT_CLASS}--fullscreen`, props.noSpacing && `${COMPONENT_CLASS}--no-spacing`, props.modalClass]);
    const wrapperBaseClass = `${COMPONENT_CLASS}-wrapper`;
    const wrapperClasses = vue.computed(() => [wrapperBaseClass, `${wrapperBaseClass}--x-${props.alignX}`, `${wrapperBaseClass}--y-${props.alignY}`, props.wrapperClass]);
    const backdropClasses = vue.computed(() => [`${COMPONENT_CLASS}-backdrop`, isVisible.value && `${COMPONENT_CLASS}-backdrop--active`, props.backdropClass]);

    const disableScroll = () => {
      document.body.classList.add(`${COMPONENT_CLASS}-open`);
      document.body.style.paddingRight = `${getScrollbarWidth()}px`;
    };

    const enableScroll = () => {
      document.body.classList.remove(`${COMPONENT_CLASS}-open`);
      document.body.style.paddingRight = '';
    };

    vue.watch([() => props.modelValue, innerValue], (modelValue, innerValue) => {
      if (!isMounted.value && (modelValue || innerValue)) {
        isMounted.value = true;
      }
    });
    vue.watch(isVisible, value => {
      vue.nextTick(() => {
        if (!value) return;
        disableScroll();
      });
    });

    const onClickOut = () => {
      if (!props.clickOut) return;
      setVisibility(false);
    };

    const onDocumentClick = e => {
      if (!isVisible.value) return;
      const target = e.target;

      if (!target.closest(`.${COMPONENT_CLASS}`)) {
        onClickOut();
      }
    };

    vue.watch(isVisible, value => {
      setTimeout(() => {
        if (value) {
          document.addEventListener('click', onDocumentClick);
        } else {
          document.removeEventListener('click', onDocumentClick);
        }
      }, 0);
    });
    vue.onUnmounted(() => {
      document.removeEventListener('click', onDocumentClick);
      enableScroll();
    });

    const onBackdropAfterLeave = () => {
      enableScroll();
      emit('after-leave');
    };

    const genBackdrop = () => {
      if (props.removeBackdrop) return null;
      const backdrop = vue.withDirectives(vue.createVNode("div", {
        "class": backdropClasses.value
      }, null), [[vue.vShow, isVisible.value]]);
      if (props.disableMotion) return backdrop;
      return vue.createVNode(vue.Transition, {
        "appear": true,
        "name": props.backdropTransition,
        "onAfterLeave": onBackdropAfterLeave
      }, {
        default: () => [backdrop]
      });
    };

    const defaultSlotProps = {
      close: () => setVisibility(false)
    };

    const genModal = () => {
      const modal = vue.withDirectives(vue.createVNode("div", {
        "class": modalClasses.value,
        "style": modalStyle.value
      }, [slots.default(defaultSlotProps)]), [[vue.vShow, isVisible.value]]);
      if (props.disableMotion) return modal;
      return vue.createVNode(vue.Transition, {
        "appear": true,
        "name": props.modalTransition,
        "onAfterEnter": () => emit('after-enter')
      }, {
        default: () => [modal]
      });
    };

    const genWrapper = () => vue.createVNode("div", {
      "class": wrapperClasses.value
    }, [genModal()]);

    const genTeleport = () => {
      if (!isMounted.value) return null;
      return vue.createVNode(vue.Teleport, {
        "to": props.teleportTarget
      }, {
        default: () => [genBackdrop(), genWrapper()]
      });
    };

    if (slots.activator) {
      const slotProps = {
        onClick: () => setVisibility(!isVisible.value)
      };
      return () => vue.createVNode(vue.Fragment, null, [slots.activator(slotProps), genTeleport()]);
    }

    return genTeleport;
  }

});

exports.Modal = Modal;
exports.setDefaultProps = setDefaultProps;
